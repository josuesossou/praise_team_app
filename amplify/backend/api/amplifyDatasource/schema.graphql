type Event @model @auth(rules: [{allow: public}]) {
    id: ID!,
    name: String!,
    date: String,
    createdAt: AWSTimestamp!,
    dateStamp: Int,
    songIds: [String],
    bgCover: String,
    createdBy: ID,
    creatorName: String,
}

type Song @model @auth(rules: [{allow: public}]) {
    songId: ID!,
    channelId: String,
    channelTitle: String,
    etag: String,
    videoTitle: String!,
    videoTitleLowercase: String!,
    videoId: String!,
    videoDescription: String,
    videoThumDefaultH: Int,
    videoThumbDefaultW: Int,
    videoThumbDefaultUrl: String,
    videoThumbMediumH: Int,
    videoThumbMediumUrl: String,
    videoThumbMediumW: Int,
    lastDatePlayed: String,
    musicSheets: [FileURL] @connection,
    createdAt: AWSTimestamp!,
    originalkey: String,
    numOfTimePlayed: Int,
    transposeList: [String],
    reported: bool
}

type Organization @model @auth(rules: [{allow: public}]) {
    organizationId: String
}

type UserData @model @auth(rules: [{allow: public}]) {
    uid: ID!,
    name: String,
    role: String,
    organizationId: String!,
    color: String
}

type FileURL @model @auth(rules: [{allow: public}]) {
    url: String,
    byUser: ID,
    userName: String
}

type TransposeData @model @auth(rules: [{allow: public}]) {
    transposeId: ID!,
    transposeKey: String,
    transposeNum: Int,
    userName: String,
    songId: ID!
}